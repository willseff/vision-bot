# Use Ubuntu 22.04 LTS as base image for better OpenCV support and AMD x64 compatibility
FROM ubuntu:22.04

# Avoid interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive

# Set working directory
WORKDIR /app

# Create non-root user for security (Azure Container Apps best practice)
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Install system dependencies for OpenCV optimized for Azure Container Apps
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3 \
    python3-pip \
    python3-venv \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    libgl1-mesa-glx \
    libgtk-3-0 \
    libgstreamer1.0-0 \
    libgstreamer-plugins-base1.0-0 \
    wget \
    curl \
    ca-certificates \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /tmp/* /var/tmp/*

# Copy requirements first for better caching
COPY app/requirements.txt .

# Create virtual environment for better dependency isolation
RUN python3 -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Upgrade pip and install Python dependencies
RUN pip install --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r requirements.txt

# Create models directory and download EDSR models with better error handling
RUN mkdir -p models && \
    cd models && \
    wget -q --timeout=30 --tries=3 https://github.com/Saafke/EDSR_Tensorflow/raw/master/models/EDSR_x2.pb && \
    wget -q --timeout=30 --tries=3 https://github.com/Saafke/EDSR_Tensorflow/raw/master/models/EDSR_x3.pb && \
    wget -q --timeout=30 --tries=3 https://github.com/Saafke/EDSR_Tensorflow/raw/master/models/EDSR_x4.pb && \
    cd .. && \
    chmod -R 755 models/

# Copy application code
COPY app/ .

# Change ownership to non-root user for security
RUN chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Set environment variables for Azure Container Apps
ENV PYTHONUNBUFFERED=1
ENV PYTHONPATH=/app
ENV PORT=8000

# Expose port (Azure Container Apps will map this to the configured port)
EXPOSE 8000

# Improved health check for Azure Container Apps
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Run the application with better configuration for container environments
CMD ["gunicorn", "main:app", "-w", "2", "--threads", "4", "-k", "uvicorn.workers.UvicornWorker", "--bind", "0.0.0.0:8000", "--timeout", "180", "--worker-connections", "200", "--max-requests", "1000", "--max-requests-jitter", "100"]